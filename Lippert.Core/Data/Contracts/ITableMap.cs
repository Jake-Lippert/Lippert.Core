using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Reflection;

namespace Lippert.Core.Data.Contracts
{
	public interface ITableMap
	{
		/// <summary>
		/// Gets the model type for the table being mapped
		/// </summary>
		Type GetModelType();

		/// <summary>
		/// Gets the name of the table that is being mapped
		/// </summary>
		string TableName { get; }

		/// <summary>
		/// Sets the name of the table that is being mapped
		/// </summary>
		void Table(string name);

		/// <summary>
		/// Gets the columns that are available for insert operations
		/// </summary>
		List<IColumnMap> InsertColumns { get; }

		/// <summary>
		/// Gets the columns that are available for update operations
		/// </summary>
		List<IColumnMap> UpdateColumns { get; }

		/// <summary>
		/// Gets the columns that are available for select operations
		/// </summary>
		List<IColumnMap> SelectColumns { get; }

		/// <summary>
		/// Gets the columns that are generated by the database upon insert
		/// </summary>
		List<IColumnMap> GeneratedColumns { get; }

		/// <summary>
		/// Gets the columns that are keys for the table
		/// </summary>
		List<IColumnMap> KeyColumns { get; }

		/// <summary>
		/// Maps a column for the property with respect to the table map's class
		/// </summary>
		IColumnMap Map(IColumnMap columnMap);

		/// <summary>
		/// Gets the column map for the property that applies to the table map's class, a subclass, or an interface
		/// </summary>
		IColumnMap this[PropertyInfo property] { get; }

		/// <summary>
		/// Maps unmapped properties as basic columns
		/// </summary>
		void AutoMap();

		/// <summary>
		/// Maps unmapped properties as specified
		/// </summary>
		/// <param name="configureColumn"></param>
		void AutoMap(Action<IColumnMap> configureColumn);
	}
	public interface ITableMap<T> : ITableMap
	{
		/// <summary>
		/// Maps a column for the property with respect to the table map's class
		/// </summary>
		IColumnMap Map(Expression<Func<T, object>> column);

		/// <summary>
		/// Gets the column map for the property with respect to the table map's class
		/// </summary>
		IColumnMap this[Expression<Func<T, object>> column] { get; }

		/// <summary>
		/// Maps the specified properties as basic columns
		/// </summary>
		void AutoMap(params Expression<Func<T, object>>[] includedColumns);
	}
}